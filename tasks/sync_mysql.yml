---
# almost always exists, it create in mysql.yml
- name: "{{ site_domain}} : Ensure database {{ site_mysql_db }} exists"
  mysql_db:
    name: "{{ site_mysql_db }}"
    state: present

- name: "{{ site_domain}} : Check if database empty"
  shell: "mysql {{ site_mysql_db }} -Brse 'SHOW TABLES' | wc -l"
  changed_when: False
  register: site_mysql_database_tables

- name: "{{ site_domain}} : Define site_mysql_database_empty"
  set_fact:
    site_mysql_database_empty: "{{ site_mysql_database_tables.stdout == '0' }}"

- name: "{{ site_domain}} : Redefine site_sync_mysql"
  set_fact:
    site_sync_mysql: "{{ site_mysql_database_empty or site_sync_mysql_force | default(false) }}"

- name: "{{ site_domain}} : Define site_mysql_dump_temp_path"
  set_fact:
    site_mysql_dump_temp_path: "{{ site_homedir }}/dump_{{ site_src_mysql_dump_file.path | basename }}"
  when: site_sync_mysql and site_src_mysql_dump_file.path is defined

- name: "{{ site_domain}} : Ensure ~/.ssh exists (rsync remote)"
  file:
    name: "~{{ ansible_user_id }}/.ssh"
    state: directory
  when: site_src_mysql_dump_file.host is defined

- name: "{{ site_domain}} : Get public key of remote server {{ site_src_mysql_dump_file.host }} (rsync remote)"
  command: ssh-keyscan -H "{{ site_src_mysql_dump_file.host }}"
  register: site_src_mysql_host_key
  when: site_sync_mysql and (site_src_mysql_dump_file.host is defined or site_sync_mysqldump)
  changed_when: False

- name: "{{ site_domain}} : Ensure host {{ site_src_mysql_dump_file.host }} known (rsync remote)"
  known_hosts:
    name: "{{ site_src_mysql_dump_file.host }}"
    key: "{{ site_src_mysql_host_key.stdout }}"
    state: present
  changed_when: False
  when: site_sync_mysql and (site_src_mysql_dump_file.host is defined or site_sync_mysqldump)

- name: "{{ site_domain }} : Check ssh connection (rsync remote)"
  command: ssh -o BatchMode=yes "{{ site_src.user }}@{{ site_src.host }}" -v exit
  changed_when: False
  when: site_sync_mysql and site_sync_mysqldump

- name: "{{ site_domain }} : Make sql dump at {{ site_src.host }} mysqldump -u {{ site_mysql_user }} -p {{ site_mysql_password }} {{ site_mysql_db }}"
  command: |
    ssh -o BatchMode=yes "{{ site_src.user }}@{{ site_src.host }}" \
    'install -m 600 /dev/null "/tmp/mysqldump_{{ site_mysql_db }}.sql.gz" && \
    mysqldump -u"{{ site_mysql_user }}" -p"{{ site_mysql_password }}" "{{ site_mysql_db }}" \
    | gzip > "/tmp/mysqldump_{{ site_mysql_db }}.sql.gz" \
    && echo "size:$(stat --printf="%s" "/tmp/mysqldump_zavodpozhservis2.sql.gz")"'
  register: site_register_mysqldump
  when: site_sync_mysql and site_sync_mysqldump
  failed_when: "'size:20' in site_register_mysqldump.stdout"

- name: "{{ site_domain }} : Register new site_src_mysql_dump_file"
  set_fact:
    site_src_mysql_dump_file:
      host: "{{ site_src_mysql_dump_file.host }}"
      user: root
      path: "/tmp/mysqldump_{{ site_mysql_db }}.sql.gz"
  when: site_sync_mysql and site_sync_mysqldump

- name: "{{ site_domain }} : Sync sql dump from {{ site_src_mysql_dump_file.user }}@{{ site_src_mysql_dump_file.host }}:{{ site_src_mysql_dump_file.path }} (rsync remote)"
  command: |
    rsync -L \
    "{{ site_src_mysql_dump_file.user }}@{{ site_src_mysql_dump_file.host }}:{{ site_src_mysql_dump_file.path }}" \
    "{{ site_mysql_dump_temp_path }}"
  when: site_src_mysql_dump_file.host is defined and site_sync_mysql
  tags: skip_ansible_lint

- name: "{{ site_domain }} : Sync mysql files with rsync (local)"
  command: rsync -L "{{ site_src_mysql_dump_file.path }}" "{{ site_mysql_dump_temp_path }}"
  #changed_when: False
  when: site_src_mysql_dump_file.path is defined and site_src_mysql_dump_file.host is not defined and site_sync_mysql
  tags: skip_ansible_lint

- name: "{{ site_domain }} : Import sql dump"
  mysql_db:
    name: "{{ site_mysql_db }}"
    state: import
    target: "{{ site_mysql_dump_temp_path }}"
  when: site_sync_mysql

- name: "{{ site_domain }} : Remove sql dump"
  file:
    path: "{{ site_mysql_dump_temp_path }}"
    state: absent
  when: site_sync_mysql

- name: "{{ site_domain }} : Remove sql dump at {{ site_src.host }}"
  command: ssh -o BatchMode=yes "{{ site_src.user }}@{{ site_src.host }}" rm "/tmp/mysqldump_{{ site_mysql_db }}.sql.gz"
  when: site_sync_mysql and site_sync_mysqldump
