---
- name: "Check if {{ site_root }} exists"
  stat: "path={{ site_root }}"
  register: site_register_site_root
  ignore_errors: true

- name: Define site_root_exists
  set_fact:
    site_root_exists: "{{ site_register_site_root.stat.exists|default(false) }}"

- name: Ensure ~/.ssh exists (rsync remote)
  file:
    name: "~{{ ansible_user_id }}/.ssh"
    state: directory
  when: site_src.host is defined

- name: "Get public key of remote server {{ site_src.host }} (rsync remote)"
  command: ssh-keyscan -H "{{ site_src.host }}"
  register: site_src_host_key
  when: site_src.host is defined
  changed_when: no

- name: "Ensure host {{ site_src.host }} known (rsync remote)"
  known_hosts:
    name: "{{ site_src.host }}"
    key: "{{ site_src_host_key.stdout }}"
    state: present
  when: site_src.host is defined

- name: "Sync files from {{ site_src.user }}@{{ site_src.host }}:{{ site_src.path }} with rsync (remote)"
  command: |
    rsync --archive --delete \
    "{{ site_src.user }}@{{ site_src.host }}:{{ site_src.path }}/" \
    "{{ site_root }}"
  #changed_when: false
  when: site_src.user is defined and site_src.host is defined and site_src.path is defined and (not site_root_exists or site_sync_files_force | default(false))

- name: Sync files with rsync (local)
  command: rsync --archive --delete "{{ site_src.path }}/" "{{ site_root }}"
  #changed_when: false
  when: site_src.path is defined and site_src.host is not defined and not site_root_exists

- name: Set owner
  file:
    path: "{{ site_root }}"
    owner: "{{ site_user }}"
    group: "{{ site_user }}"
    recurse: yes
  #changed_when: false
